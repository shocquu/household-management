import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import { UserService } from '../backend/src/user/user.service';
// import { JwtService } from '@nestjs/jwt';
import { JwtPayload } from './jwt.strategy';
import { PrismaService } from '../backend/src/prisma/prisma.service';
import { User } from '@prisma/client';
import { hash } from 'bcrypt';
// import {User} from "../users/user.entity";

@Injectable()
export class AuthService {
    constructor(
        private readonly prisma: PrismaService,
        // private readonly jwtService: JwtService,
        private readonly userService: UserService
    ) {}

    // private _createToken({ login }): any {
    // const user: JwtPayload = { login };
    // const Authorization = this.jwtService.sign(user);
    // return {
    //   Authorization,
    //   expiresIn: process.env.EXPIRESIN,
    // };
    // }

    async login(loginUserDto: any): Promise<any> {
        const user = await this.userService.findByLogin(loginUserDto);
        // const token = this._createToken(user);

        return {
            // ...token,
            data: user,
        };
    }

    async register(userDto: any): Promise<RegistrationStatus> {
        let status: RegistrationStatus = {
            success: true,
            message: 'account_created',
        };

        try {
            status.data = await this.userService.create(userDto);
        } catch (error) {
            status = {
                success: false,
                message: error,
            };
        }

        return status;
    }

    async validateUser(payload: JwtPayload): Promise<any> {
        const user = await this.userService.findByLogin(payload);

        if (!user) throw new HttpException('invalid_token', HttpStatus.UNAUTHORIZED);

        return user;
    }
}

export interface RegistrationStatus {
    success: boolean;
    message: string;
    data?: User;
}
export interface RegistrationSeederStatus {
    success: boolean;
    message: string;
    data?: User[];
}
