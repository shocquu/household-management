// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  username      String    @unique
  displayName   String
  password      String
  avatarUrl     String    @default("/assets/iamges/avatars/avatar_default.jpg")
  role          Role      @default(USER)
  dateFormat    String    @default("dd-MM-yyyy")
  timeFormat    String    @default("HH:mm")

  tasks         Task[]
  comments      Comment[]

  refreshToken  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  @@map("user")
}


model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean   @default(false)

  tags        TaskTags[]
  comments    Comment[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  userId      Int
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@map("task")
}

model Tag {
  id          Int       @id @default(autoincrement())
  label       String    @unique
  color       String

  tasks       TaskTags[]

  @@map("tag")
}

model TaskTags {
  id          Int       @id @default(autoincrement())
  task        Task?     @relation(fields: [taskId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag         Tag?      @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  taskId      Int?
  tagId       Int?
}

model Comment {
  id          Int       @id @default(autoincrement())
  message     String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  authorId    Int
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  taskId      Int
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("comment")
}

enum Role {
  USER
  ADMIN
}




