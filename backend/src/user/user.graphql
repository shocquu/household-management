type User {
  id: Int!
  email: String!
  username: String!
  displayName: String!
  password: String!
  avatarUrl: String!
  refreshToken: String
  role: Role!

  settings: Settings

  tasks: [Task]
  comments: [Comment]
}

type Settings {
  dateFormat: String!
  timeFormat: String!
}

input CreateUserInput {
  email: String!
  username: String!
  displayName: String!
  password: String!
  avatarUrl: String!

  taskId: Int
  commentId: Int
}

input UpdateUserInput {
  id: Int!
  email: String
  username: String
  displayName: String
  password: String
  avatarUrl: String
  refreshToken: String
  dateFormat: String
  timeFormat: String
}

input LoginUserInput {
  email: String!
  password: String!
  remember: Boolean
}

input UpdatePasswordInput {
  id: Int!
  oldPassword: String
  newPassword: String
}

type LoggedInUserOutput {
  accessToken: String
  refreshToken: String
}

type LoggedOutUserOutput {
  refreshToken: String
}

type Query {
  users(sortBy: Sort): [User]!
  user(id: Int!): User
  whoami: User
  refresh: LoggedInUserOutput
  logoutUser: User
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User
  loginUser(loginUserInput: LoginUserInput!): LoggedInUserOutput!
  updatePassword(updatePasswordInput: UpdatePasswordInput!): User!
}

input Sort {
  field: String!
  order: SortOrder = ASC
}

enum SortOrder {
  ASC
  DESC
}

enum Role {
  ADMIN
  USER
}
